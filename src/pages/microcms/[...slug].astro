---
import type { InferGetStaticPropsType, GetStaticPathsItem } from "astro";
/* eslint-disable-next-line import/no-unresolved */
import { getCollection } from "astro:content";
/* eslint-disable-next-line import/no-unresolved */
import { ClientRouter } from "astro:transitions";
import {
  SarkaraLayout,
  Paper,
  PaperLink,
  Navigation,
  Link,
  Badge,
  useNavigation,
} from "@cieloazul310/astro-sarkara";
import { css } from "styled-system/css";
import { hstack } from "styled-system/patterns";
import Analytics from "@/components/analytics.astro";
import MicrocmsCategories from "@/components/microcms/microcms-categories.astro";
import Ad from "@/components/ad.astro";
import { siteMetadata, menu } from "@/data";
import { getBlogDetail, parseDate, rehypeIt, slugify, excerpt } from "@/utils";

import "@/index.css";

// 詳細記事ページの全パスを取得
export async function getStaticPaths() {
  const allPost = await getCollection("microCMSPost");
  return allPost
    .map((post) => ({
      ...post,
      slug: slugify("microcms", post, true),
    }))
    .map(({ id, slug }, index, arr) => {
      const newer = index !== 0 ? arr[index - 1] : null;
      const older = index !== arr.length - 1 ? arr[index + 1] : null;

      return {
        params: {
          slug,
        },
        props: {
          id,
          newer,
          older,
        },
      } satisfies GetStaticPathsItem;
    });
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>;
const { id, newer, older } = Astro.props;
const { title, publishedAt, content, category, eyecatch } =
  await getBlogDetail(id);

const html = await rehypeIt(content);
const navigation = useNavigation(
  { left: newer, right: older },
  {
    href: (obj) => `/microcms/${obj.slug}`,
    primaryText: (obj) => obj.data.title,
    secondaryText: (obj) => parseDate(obj.data.publishedAt),
  },
);
const description = excerpt(content);
---

<SarkaraLayout
  menu={menu}
  siteMetadata={siteMetadata}
  title={title}
  description={description}
  image={eyecatch?.url}
>
  <Analytics slot="top-of-head" />
  <ClientRouter slot="bottom-of-head" />
  <Fragment slot="jumbotron-footer">
    <time datetime={parseDate(publishedAt)}>{parseDate(publishedAt)}</time>
  </Fragment>
  <Paper set:html={String(html)} />
  <Paper>
    <footer>
      <h2>{title}</h2>
      <p class={hstack({ gap: 2 })}>
        <time datetime={parseDate(publishedAt)}>{parseDate(publishedAt)}</time>
      </p>
      {
        category && (
          <p class={css({ mt: 1 })}>
            <Link
              href={`/microcms/categories/${encodeURIComponent(category.id)}`}
            >
              <Badge colorPalette="primary">{category.name}</Badge>
            </Link>
          </p>
        )
      }
    </footer>
  </Paper>
  <Navigation {...navigation} />
  <Ad />
  <PaperLink href="/microcms/">CMS Posts Top</PaperLink>
  <Fragment slot="sidebar-top">
    <Navigation {...navigation} direction="column" />
    <MicrocmsCategories />
  </Fragment>
  <Ad variant="display-2" slot="sidebar-bottom" disableMargin />
  <MicrocmsCategories slot="drawer-top" />
</SarkaraLayout>
