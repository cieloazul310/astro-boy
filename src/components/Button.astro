---
import type { HTMLAttributes } from "astro/types";
import { css, cva, cx, type RecipeVariantProps } from "../../styled-system/css";
import type { PropertyTypes } from "../../styled-system/types/prop-type";

const buttonStyle = cva({
  base: {
    rounded: "md",
    display: "flex",
    shadow: "sm",
    py: 2,
    px: 3,
    cursor: "pointer",
  },
  variants: {
    visual: {
      solid: {
        bg: { base: "colorPalette.600", _hover: "colorPalette.700" },
        color: "white",
        _dark: { bg: { base: "colorPalette.700", _hover: "colorPalette.600" } },
      },
      outline: {
        borderWidth: "1px",
        borderColor: { base: "colorPalette.700", _dark: "colorPalette.100" },
        color: { base: "colorPalette.700", _dark: "colorPalette.100" },
      },
    },
    size: {
      sm: { fontSize: "sm" },
      md: { fontSize: "md" },
      lg: { fontSize: "lg" },
    },
  },
  defaultVariants: {
    visual: "solid",
    size: "sm",
  },
});
export type ButtonVariants = RecipeVariantProps<typeof buttonStyle>;

type Props = ButtonVariants &
  HTMLAttributes<"button"> & {
    className?: string;
    colorPalette?: PropertyTypes["colorPalette"];
  };
const {
  visual,
  size,
  className,
  colorPalette = "neutral",
  ...buttonProps
} = Astro.props;
---

<button
  class={cx(css({ colorPalette }), buttonStyle({ visual, size }), className)}
  {...buttonProps}
>
  <slot />
</button>
