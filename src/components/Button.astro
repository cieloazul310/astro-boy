---
import { Icon } from "astro-icon";
import type { HTMLAttributes } from "astro/types";
import { css, sva, cx, type RecipeVariantProps } from "../../styled-system/css";
import { buttonBase } from "../utils/cva";
import type { PropertyTypes } from "../../styled-system/types/prop-type";

const buttonStyle = sva({
  slots: ["button", "icon"],
  base: {
    button: {
      width: "fit-content",
      py: 2,
      px: "0.8em",
    },
    icon: {
      width: "1.2em",
      height: "1.2em",
    },
  },
  variants: {
    iconPlace: {
      start: {
        button: {
          flexDirection: "row",
        },
        icon: {
          ml: "-0.4em",
        },
      },
      end: {
        button: {
          flexDirection: "row-reverse",
        },
        icon: {
          mr: "-0.4em",
        },
      },
    },
  },
  defaultVariants: {
    iconPlace: "start",
  },
});

export type ButtonVariants = RecipeVariantProps<typeof buttonStyle> &
  RecipeVariantProps<typeof buttonBase>;

type Props = ButtonVariants &
  HTMLAttributes<"button"> & {
    className?: string;
    colorPalette?: PropertyTypes["colorPalette"];
    icon?: string;
  };
const {
  visual,
  size,
  iconPlace,
  className,
  icon,
  colorPalette = "neutral",
  ...buttonProps
} = Astro.props;
const classes = buttonStyle({ iconPlace });
---

<button
  class={cx(
    css({ colorPalette }),
    buttonBase({ visual, size }),
    classes.button,
    className,
  )}
  {...buttonProps}
>
  {icon && <Icon name={icon} class={classes.icon} />}
  <slot />
</button>
