---
import { Icon } from "astro-icon";
import type { HTMLAttributes } from "astro/types";
import { css, sva, cx, type RecipeVariantProps } from "../../styled-system/css";
import { buttonBase } from "../styles/recipes";
import type { PropertyTypes } from "../../styled-system/types/prop-type";

const iconButtonStyle = sva({
  slots: ["button", "icon"],
  base: {},
  variants: {
    shape: {
      square: { button: { rounded: "md" } },
      circle: { button: { rounded: "full" } },
    },
    size: {
      sm: { button: { width: 10, height: 10 }, icon: { width: 6, height: 6 } },
      md: { button: { width: 14, height: 14 }, icon: { width: 8, height: 8 } },
      lg: {
        button: { width: 16, height: 16 },
        icon: { width: 10, height: 10 },
      },
      xl: {
        button: { width: 20, height: 20 },
        icon: { width: 14, height: 14 },
      },
    },
  },
  defaultVariants: {
    size: "md",
    shape: "square",
  },
});
export type ButtonVariants = RecipeVariantProps<typeof iconButtonStyle> &
  RecipeVariantProps<typeof buttonBase>;

type Props = ButtonVariants &
  HTMLAttributes<"button"> & {
    className?: string;
    colorPalette?: PropertyTypes["colorPalette"];
    icon: string;
  };
const {
  visual,
  size,
  shape,
  className,
  icon,
  colorPalette = "neutral",
  ...buttonProps
} = Astro.props;
const classes = iconButtonStyle({ size, shape });
---

<button
  class={cx(
    css({ colorPalette }),
    buttonBase({ visual }),
    classes.button,
    className,
  )}
  {...buttonProps}
>
  <Icon name={icon} class={classes.icon} />
</button>
